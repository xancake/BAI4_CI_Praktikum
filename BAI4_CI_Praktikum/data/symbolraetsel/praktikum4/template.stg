group template;

sums(symbols,sums) ::= <<
package org.haw.cip.praktikum4.symbolraetsel;

import choco.Choco;
import choco.Options;
import choco.cp.model.CPModel;
import choco.cp.solver.CPSolver;
import choco.kernel.model.Model;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.solver.Solver;

import java.util.List;
import java.util.ArrayList;

public class SymbolraetselChocoSolver {
	public static void main(String... args) {
		Model model = new CPModel();
		
		// Alle Buchstaben als Variable deklarieren
		<symbols : {symbol |IntegerVariable <symbol> = Choco.makeIntVar("<symbol>", 0, 9, Options.V_ENUM);}; separator="\n">
		
		// Hilfsvariablen für die Überträge
		int aufgabe = 1, uebertrag;
		List\<IntegerVariable\> u;
		
		<sums; separator="\n\n">
		
		// Constraint dafür, dass alle Zeichen unterschiedlich sein müssen
		model.addConstraint(Choco.allDifferent(<symbols; separator=", ">));
		
		Solver s = new CPSolver();
		s.read(model);
		if(s.solve()) {
			System.out.println("Das Rätsel wurde gelöst!");
			<symbols : {symbol |System.out.println(<symbol>.getName() + " = " + s.getVar(<symbol>).getVal());}; separator="\n">
		} else {
			System.out.println("Das Rätsel konnte nicht gelöst werden!");
		}
	}
}
>>

sum(number1, number2, number3) ::= <<
// Alle Überträge von Aufgabe X als Variable deklarieren
u = new ArrayList\<\>();
u.add(Choco.makeIntVar("a" + aufgabe + "u" + u.size(), 0, 0, Options.V_ENUM));
<number1.characters, number2.characters, number3.characters :
	{c1, c2, c3 |u.add(Choco.makeIntVar("a" + aufgabe + "u" + u.size(), 0, 1, Options.V_ENUM));}
; separator="\n">
u.remove(u.size()-1);

// Constraints für Aufgabe X
uebertrag = u.size();
<number1.characters, number2.characters, number3.characters :
	{c1, c2, c3 |model.addConstraint(Choco.eq(Choco.plus(Choco.plus(<if(c1)><c1><else>Choco.ZERO<endif>, <if(c2)><c2><else>Choco.ZERO<endif>), u.get(--uebertrag)), Choco.plus(<if(c3)><c3><else>Choco.ZERO<endif>, Choco.mult(u.get((uebertrag+1)%u.size()), 10))));}
; separator="\n">
aufgabe++;
>>
